def IS_ANDROID = project.hasProperty('IS_ANDROID') ? project.IS_ANDROID: true
def IS_NEXT = project.hasProperty('IS_NEXT') ? project.IS_NEXT: false
def IS_NETTY = project.hasProperty('IS_NETTY') ? project.IS_NETTY: false
def ARTIFACT_ANDROID = (project.hasProperty('BUILD_LEGACY') && project.BUILD_LEGACY) ? 'autobahn-android-legacy': 'autobahn-android'
def PUBLISH = project.hasProperty('PUBLISH') && project.PUBLISH

apply plugin: IS_ANDROID ? 'com.android.library': 'java-library'

def ARTIFACT_JAVA = 'autobahn-java'
def ARTIFACT_NEXT = 'autobahn'

def groupID = 'com.minapp.android.autobahn'
def gitUrl = 'https://github.com/crossbario/autobahn-java.git'
def licenseName = 'MIT'
def licenseUrl = 'https://opensource.org/licenses/MIT'
def relVersion = '20.7.3'
def siteUrl = 'https://github.com/crossbario/autobahn-java'

dependencies {
    api 'com.fasterxml.jackson.core:jackson-core:2.11.1'
    //api 'net.sourceforge.streamsupport:streamsupport-cfuture:1.6.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.1'
    implementation 'org.msgpack:jackson-dataformat-msgpack:0.8.20'
    if (IS_ANDROID) {
        implementation 'com.github.joshjdevl.libsodiumjni:libsodium-jni-aar:2.0.2'
        implementation 'org.web3j:core:4.6.0-android'
        implementation 'org.web3j:abi:4.6.0-android'
        implementation 'org.web3j:utils:4.6.0-android'
    } else {
        implementation 'com.github.joshjdevl.libsodiumjni:libsodium-jni:2.0.2'
        implementation 'org.web3j:core:4.6.0'
        implementation 'org.web3j:abi:4.6.0'
        implementation 'org.web3j:utils:4.6.0'
        implementation 'org.json:json:20200518'
    }
    if (IS_NETTY) {
        implementation 'io.netty:netty-codec-http:4.1.50.Final'
        implementation 'io.netty:netty-handler:4.1.50.Final'
    }
}

if (PUBLISH) {
    apply plugin: 'com.jfrog.bintray'

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        if (IS_ANDROID) {
            configurations = ['archives']
        } else {
            publications = ['mavenJava']
        }
        publish = true
        pkg {
            repo = 'minapp-android-sdk'
            if (IS_ANDROID) {
                name = ARTIFACT_ANDROID
            } else if (IS_NEXT){
                name = ARTIFACT_NEXT
            } else {
                name = ARTIFACT_JAVA
            }
            licenses = [licenseName]
            vcsUrl = gitUrl
            version {
                name = relVersion
                released = new Date()
                mavenCentralSync {
                    sync = true
                    user = System.getenv('SONATYPE_USERNAME')
                    password = System.getenv('SONATYPE_PASSWORD')
                    close = '1'
                }
            }
        }
    }
}

if (IS_ANDROID) {
    android {
        compileSdkVersion 29
        buildToolsVersion '29.0.3'
        defaultConfig {
            minSdkVersion 24
            targetSdkVersion 29
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            }
        }
        sourceSets {
            main {
                java {
                    exclude 'io/crossbar/autobahn/wamp/transports/Netty*'
                    exclude 'io/crossbar/autobahn/utils/ABJLogger.java'
                }
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        lintOptions {
            abortOnError false
        }
        packagingOptions {
            exclude 'META-INF/spring.tooling'
            exclude 'META-INF/spring.handlers'
            exclude 'META-INF/spring.schemas'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/notice.txt'
        }
    }


    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }
    afterEvaluate {
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }
    project.archivesBaseName = ARTIFACT_ANDROID
    group = groupID
    version = relVersion

    if (PUBLISH) {
        apply plugin: 'com.github.dcendents.android-maven'

        install {
            repositories.mavenInstaller {
                // This generates POM.xml with proper parameters
                pom {
                    project {
                        packaging 'aar'
                        groupId groupID
                        artifactId ARTIFACT_ANDROID

                        // Add your description here
                        name ARTIFACT_ANDROID
                        description 'WebSocket & WAMP for Android'
                        url siteUrl

                        // Set your license
                        licenses {
                            license {
                                name licenseName
                                url licenseUrl
                            }
                        }
                        developers {
                            developer {
                                id "crossbario"
                                name "Crossbar.io"
                                email "support@crossbario.com"
                            }
                        }
                        scm {
                            url siteUrl
                        }
                    }
                }
            }
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
} else {
    // Create the pom configuration:
    def pomConfig = {
        // Set your license
        licenses {
            license {
                name licenseName
                url licenseUrl
            }
        }
        developers {
            developer {
                id "crossbario"
                name "Crossbar.io"
                email "support@crossbario.com"
            }
        }
        scm {
            url siteUrl
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    if (PUBLISH) {
        apply plugin: 'maven-publish'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    groupId groupID
                    artifactId IS_NEXT ? ARTIFACT_NEXT: ARTIFACT_JAVA
                    version relVersion
                    pom.withXml {
                        def root = asNode()
                        root.appendNode('description', 'WebSocket & WAMP for Java8+')
                        root.appendNode('name', 'Autobahn Java')
                        root.appendNode('url', siteUrl)
                        root.children().last() + pomConfig
                    }
                }
            }
        }
    }
    if (IS_NEXT) {
        sourceSets {
            main {
                java {
                    exclude 'io/crossbar/autobahn/wamp/transports/AndroidWebSocket.java'
                    exclude 'io/crossbar/autobahn/wamp/transports/Netty*'
                    exclude 'io/crossbar/autobahn/websocket/utils/AndroidThreadMessenger.java'
                    exclude 'io/crossbar/autobahn/utils/ABALogger.java'
                }
            }
        }
    } else {
        sourceSets {
            main {
                java {
                    exclude 'io/crossbar/autobahn/wamp/transports/AndroidWebSocket.java'
                    exclude 'io/crossbar/autobahn/wamp/transports/WebSocket.java'
                    exclude 'io/crossbar/autobahn/websocket'
                    exclude 'io/crossbar/autobahn/utils/ABALogger.java'
                }
            }
        }
    }
    jar {
        version = relVersion
    }
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
